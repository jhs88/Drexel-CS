2.1):
	#f = $s0
	#g = $s1
	#h = $s2
	#i = $s3

	addi $s0, $s2, -5	#f = h -5
	add $s0, $s1, $s0	#f = g + (h - 5)

2.3):
	#f = $s0
        #g = $s1
        #h = $s2
        #i = $s3
	#j = $s4
	#A = $s6
	#B = $s7

	sub $t0, $s3, $s4 	#$t0 = i - j		#load i - j into t0
	sll $t0, $t0, 2 	#$t0 = (i - j) * 4 	#shift left 2 to *4
	lw $t1, 0($s6)		#$t1 = A[0]		#adjust register location
	add $t1, $t1, $t0	#$t1 = &A[i - j]	#add t- to &A
	lw $t1, 0($t1)		#$t1 = A[i - j]		#load vlaue A[i -j] into t0
	sw $t1, 32(s7)		#B[8] = A[i - j]	#store t0 into B[8]

2.11):

	a) I-type, OP: 8, RS: 22, RT: 8, IM: 4
	b) R-type, OP: 32, RS:22, RT: 0, RD: 9
	c) I-type, OP: 43, RS: 8, RT: 9, IM: 0
	d) I-type, OP: 35, RS: 8, RT: 8, IM: 0
	e) R-type:, OP: 32, RS: 9, RT: 8, RD: 16

2.15):

	sw opcode = 43 = 101011
	immediate address = 0000000000100000
	I-Type instruction
	destination register: $t1 = 9 = 01001
	source register: $t2 = 10 == 01010
	Binary Rep: 1010 1101 0100 1001 0000 0000 0010 0000
	
	Hex Rep: 0xAD490020

2.39):

	lui $t1, 0x2001 #$t1 = 0010 0000 0000 0001 0000 0000 0000 0000
	ori $t1, 0x4924	#$t1 = 0010 0000 0000 0001 0100 1001 0010 0100
